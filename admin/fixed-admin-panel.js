// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å–∞–π—Ç–∞

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let slidesData = [];
let servicesData = [];
let doctorsData = [];
let newsData = [];
let reviewsData = [];
let pricesData = [];
let settingsData = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!localStorage.getItem('adminAuthenticated')) {
        window.location.href = 'login.html';
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadDashboardData();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    if (!localStorage.getItem('adminAuthenticated')) {
        window.location.href = 'login.html';
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    localStorage.removeItem('adminAuthenticated');
    window.location.href = 'login.html';
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
function switchSection(sectionId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    document.getElementById(sectionId + '-section').classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
    loadSectionData(sectionId);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
function loadSectionData(section) {
    switch(section) {
        case 'dashboard':
            loadDashboardData();
            break;
        case 'slider':
            loadSlidesData();
            break;
        case 'services':
            loadServicesData();
            break;
        case 'doctors':
            loadDoctorsData();
            break;
        case 'news':
            loadNewsData();
            break;
        case 'reviews':
            loadReviewsData();
            break;
        case 'prices':
            loadPricesData();
            break;
        case 'settings':
            loadSettingsData();
            break;
    }
}

// ==================== –î–ê–®–ë–û–†–î ====================
function loadDashboardData() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    loadJSONData('../data/services.json')
        .then(data => {
            document.getElementById('servicesCount').textContent = data.length;
        })
        .catch(() => {
            document.getElementById('servicesCount').textContent = 0;
        });

    loadJSONData('../data/doctors.json')
        .then(data => {
            document.getElementById('doctorsCount').textContent = data.length;
        })
        .catch(() => {
            document.getElementById('doctorsCount').textContent = 0;
        });

    loadJSONData('../data/slides.json')
        .then(data => {
            document.getElementById('slidesCount').textContent = data.length;
        })
        .catch(() => {
            document.getElementById('slidesCount').textContent = 0;
        });

    loadJSONData('../data/news.json')
        .then(data => {
            document.getElementById('newsCount').textContent = data.length;
        })
        .catch(() => {
            document.getElementById('newsCount').textContent = 0;
        });
}

// ==================== –°–õ–ê–ô–î–ï–† ====================
function loadSlidesData() {
    loadJSONData('../data/slides.json')
        .then(data => {
            slidesData = data;
            renderSlides();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–∞–π–¥–æ–≤:', error);
            slidesData = createDefaultSlidesData();
            renderSlides();
        });
}

function createDefaultSlidesData() {
    return [
        {
            id: 1,
            title: "–°—É—á–∞—Å–Ω–∞ –º–µ–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞",
            subtitle: "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ª—ñ–∫–∞—Ä—ñ —Ç–∞ –Ω–æ–≤—ñ—Ç–Ω—î –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
            description: "–ù–∞—à–∞ –∫–ª—ñ–Ω—ñ–∫–∞ –ø—Ä–æ–ø–æ–Ω—É—î —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –º–µ–¥–∏—á–Ω–∏—Ö –ø–æ—Å–ª—É–≥ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Å—É—á–∞—Å–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π",
            background_image: "https://images.unsplash.com/photo-1519494026892-80bbd2d6fd0d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&q=80",
            button_text: "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º",
            button_link: "/contact"
        }
    ];
}

function renderSlides() {
    const container = document.getElementById('slidesContainer');
    container.innerHTML = '';

    slidesData.forEach((slide, index) => {
        const slideCard = createSlideCard(slide, index);
        container.appendChild(slideCard);
    });
}

function createSlideCard(slide, index) {
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
        <div class="card-header">
            <h3>–°–ª–∞–π–¥ ${index + 1}</h3>
        </div>
        
        <div class="form-group">
            <label>–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
            <img src="${slide.background_image}" alt="–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="current-image" id="slideCurrentImage_${index}">
        </div>

        <div class="form-group">
            <label>–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
            <div class="image-upload" onclick="selectSlideImage(${index})">
                <input type="file" id="slideImageInput_${index}" accept="image/*" style="display: none;" onchange="handleSlideImageUpload(${index}, this)">
                <p>üì∏ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                <p style="font-size: 12px; color: #7f8c8d;">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, GIF</p>
                <img id="slidePreview_${index}" class="image-preview" style="display: none;">
            </div>
        </div>

        <div class="form-group">
            <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
            <input type="text" id="slideTitle_${index}" value="${slide.title || ''}" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞">
        </div>

        <div class="form-group">
            <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>
            <input type="text" id="slideSubtitle_${index}" value="${slide.subtitle || ''}" placeholder="–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞">
        </div>

        <div class="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
            <textarea id="slideDescription_${index}" rows="3" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞">${slide.description || ''}</textarea>
        </div>

        <div class="form-group">
            <label>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</label>
            <input type="text" id="slideButtonText_${index}" value="${slide.button_text || ''}" placeholder="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏">
        </div>

        <div class="form-group">
            <label>–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏:</label>
            <input type="text" id="slideButtonLink_${index}" value="${slide.button_link || ''}" placeholder="–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏">
        </div>

        <div class="action-buttons">
            <button class="btn btn-success" onclick="saveSlide(${index})">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button class="btn btn-danger" onclick="deleteSlide(${index})">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;
    return card;
}

function selectSlideImage(index) {
    document.getElementById(`slideImageInput_${index}`).click();
}

function handleSlideImageUpload(index, input) {
    const file = input.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const preview = document.getElementById(`slidePreview_${index}`);
            const uploadDiv = input.parentElement;
            
            preview.src = e.target.result;
            preview.style.display = 'block';
            uploadDiv.classList.add('has-image');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–∞–π–¥–∞
            slidesData[index].background_image = e.target.result;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            document.getElementById(`slideCurrentImage_${index}`).src = e.target.result;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            saveSlidesData();
        };
        reader.readAsDataURL(file);
    }
}

function saveSlide(index) {
    const title = document.getElementById(`slideTitle_${index}`).value;
    const subtitle = document.getElementById(`slideSubtitle_${index}`).value;
    const description = document.getElementById(`slideDescription_${index}`).value;
    const buttonText = document.getElementById(`slideButtonText_${index}`).value;
    const buttonLink = document.getElementById(`slideButtonLink_${index}`).value;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    slidesData[index] = {
        ...slidesData[index],
        title: title,
        subtitle: subtitle,
        description: description,
        button_text: buttonText,
        button_link: buttonLink
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–ª–∞–π–¥—ã
    saveSlidesData();
}

function deleteSlide(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–ª–∞–π–¥?')) {
        slidesData.splice(index, 1);
        saveSlidesData();
        renderSlides();
    }
}

function addNewSlide() {
    const newSlide = {
        id: Date.now(),
        title: "–ù–æ–≤–∏–π —Å–ª–∞–π–¥",
        subtitle: "–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
        description: "–û–ø–∏—Å –Ω–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É",
        background_image: "https://images.unsplash.com/photo-1519494026892-80bbd2d6fd0d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&q=80",
        button_text: "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ",
        button_link: "/about"
    };
    
    slidesData.push(newSlide);
    saveSlidesData();
    renderSlides();
}

function saveSlidesData() {
    saveJSONData('../data/slides.json', slidesData)
        .then(() => {
            showSuccessMessage();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–æ–≤:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–ª–∞–π–¥–æ–≤');
        });
}

// ==================== –£–°–õ–£–ì–ò ====================
function loadServicesData() {
    loadJSONData('../data/services.json')
        .then(data => {
            servicesData = data;
            renderServices();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', error);
            servicesData = createDefaultServicesData();
            renderServices();
        });
}

function createDefaultServicesData() {
    return [
        {
            id: 1,
            name: "–¢–µ—Ä–∞–ø—ñ—è",
            description: "–ó–∞–≥–∞–ª—å–Ω–∞ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó",
            price: "500",
            category: "consultation",
            duration: "30 —Ö–≤"
        }
    ];
}

function renderServices() {
    const container = document.getElementById('servicesContainer');
    container.innerHTML = '';

    servicesData.forEach((service, index) => {
        const serviceCard = createServiceCard(service, index);
        container.appendChild(serviceCard);
    });
}

function createServiceCard(service, index) {
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
        <div class="card-header">
            <h3>–£—Å–ª—É–≥–∞ ${index + 1}</h3>
        </div>
        
        <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
            <input type="text" id="serviceName_${index}" value="${service.name || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏">
        </div>

        <div class="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
            <textarea id="serviceDescription_${index}" rows="3" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏">${service.description || ''}</textarea>
        </div>

        <div class="form-group">
            <label>–¶–µ–Ω–∞:</label>
            <input type="text" id="servicePrice_${index}" value="${service.price || ''}" placeholder="–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏">
        </div>

        <div class="form-group">
            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
            <input type="text" id="serviceCategory_${index}" value="${service.category || ''}" placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥–∏">
        </div>

        <div class="form-group">
            <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</label>
            <input type="text" id="serviceDuration_${index}" value="${service.duration || ''}" placeholder="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏">
        </div>

        <div class="action-buttons">
            <button class="btn btn-success" onclick="saveService(${index})">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button class="btn btn-danger" onclick="deleteService(${index})">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;
    return card;
}

function saveService(index) {
    const name = document.getElementById(`serviceName_${index}`).value;
    const description = document.getElementById(`serviceDescription_${index}`).value;
    const price = document.getElementById(`servicePrice_${index}`).value;
    const category = document.getElementById(`serviceCategory_${index}`).value;
    const duration = document.getElementById(`serviceDuration_${index}`).value;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    servicesData[index] = {
        ...servicesData[index],
        name: name,
        description: description,
        price: price,
        category: category,
        duration: duration
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
    saveServicesData();
}

function deleteService(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?')) {
        servicesData.splice(index, 1);
        saveServicesData();
        renderServices();
    }
}

function addNewService() {
    const newService = {
        id: Date.now(),
        name: "–ù–æ–≤–∞ –ø–æ—Å–ª—É–≥–∞",
        description: "–û–ø–∏—Å –Ω–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏",
        price: "–¶—ñ–Ω–∞",
        category: "other",
        duration: "30 —Ö–≤"
    };
    
    servicesData.push(newService);
    saveServicesData();
    renderServices();
}

function saveServicesData() {
    saveJSONData('../data/services.json', servicesData)
        .then(() => {
            showSuccessMessage();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª—É–≥:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥');
        });
}

// ==================== –í–†–ê–ß–ò ====================
function loadDoctorsData() {
    loadJSONData('../data/doctors.json')
        .then(data => {
            doctorsData = data;
            renderDoctors();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–∞—á–µ–π:', error);
            doctorsData = createDefaultDoctorsData();
            renderDoctors();
        });
}

function createDefaultDoctorsData() {
    return [
        {
            id: 1,
            name: "–ü–µ—Ç—Ä–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á",
            specialty: "–¢–µ—Ä–∞–ø–µ–≤—Ç",
            experience: 15,
            photo: "https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80",
            description: "–û–ø—ã—Ç–Ω—ã–π —Ç–µ—Ä–∞–ø–µ–≤—Ç —Å 15-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º"
        }
    ];
}

function renderDoctors() {
    const container = document.getElementById('doctorsContainer');
    container.innerHTML = '';

    doctorsData.forEach((doctor, index) => {
        const doctorCard = createDoctorCard(doctor, index);
        container.appendChild(doctorCard);
    });
}

function createDoctorCard(doctor, index) {
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
        <div class="card-header">
            <h3>–í—Ä–∞—á ${index + 1}</h3>
        </div>
        
        <div class="form-group">
            <label>–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ:</label>
            <img src="${doctor.photo}" alt="–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ" class="current-image" id="doctorCurrentImage_${index}">
        </div>

        <div class="form-group">
            <label>–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:</label>
            <div class="image-upload" onclick="selectDoctorImage(${index})">
                <input type="file" id="doctorImageInput_${index}" accept="image/*" style="display: none;" onchange="handleDoctorImageUpload(${index}, this)">
                <p>üì∏ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ</p>
                <p style="font-size: 12px; color: #7f8c8d;">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, GIF</p>
                <img id="doctorPreview_${index}" class="image-preview" style="display: none;">
            </div>
        </div>

        <div class="form-group">
            <label>–§–ò–û:</label>
            <input type="text" id="doctorName_${index}" value="${doctor.name || ''}" placeholder="–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ">
        </div>

        <div class="form-group">
            <label>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</label>
            <input type="text" id="doctorSpecialty_${index}" value="${doctor.specialty || ''}" placeholder="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞">
        </div>

        <div class="form-group">
            <label>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</label>
            <input type="text" id="doctorExperience_${index}" value="${doctor.experience || ''}" placeholder="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã">
        </div>

        <div class="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
            <textarea id="doctorDescription_${index}" rows="3" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞">${doctor.description || ''}</textarea>
        </div>

        <div class="action-buttons">
            <button class="btn btn-success" onclick="saveDoctor(${index})">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button class="btn btn-danger" onclick="deleteDoctor(${index})">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;
    return card;
}

function selectDoctorImage(index) {
    document.getElementById(`doctorImageInput_${index}`).click();
}

function handleDoctorImageUpload(index, input) {
    const file = input.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const preview = document.getElementById(`doctorPreview_${index}`);
            const uploadDiv = input.parentElement;
            
            preview.src = e.target.result;
            preview.style.display = 'block';
            uploadDiv.classList.add('has-image');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞
            doctorsData[index].photo = e.target.result;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            document.getElementById(`doctorCurrentImage_${index}`).src = e.target.result;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            saveDoctorsData();
        };
        reader.readAsDataURL(file);
    }
}

function saveDoctor(index) {
    const name = document.getElementById(`doctorName_${index}`).value;
    const specialty = document.getElementById(`doctorSpecialty_${index}`).value;
    const experience = document.getElementById(`doctorExperience_${index}`).value;
    const description = document.getElementById(`doctorDescription_${index}`).value;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    doctorsData[index] = {
        ...doctorsData[index],
        name: name,
        specialty: specialty,
        experience: experience,
        description: description
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
    saveDoctorsData();
}

function deleteDoctor(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞?')) {
        doctorsData.splice(index, 1);
        saveDoctorsData();
        renderDoctors();
    }
}

function addNewDoctor() {
    const newDoctor = {
        id: Date.now(),
        name: "–ù–æ–≤–∏–π –ª—ñ–∫–∞—Ä",
        specialty: "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å",
        experience: "–î–æ—Å–≤—ñ–¥",
        description: "–û–ø–∏—Å –ª—ñ–∫–∞—Ä—è",
        photo: "https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80"
    };
    
    doctorsData.push(newDoctor);
    saveDoctorsData();
    renderDoctors();
}

function saveDoctorsData() {
    saveJSONData('../data/doctors.json', doctorsData)
        .then(() => {
            showSuccessMessage();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–∞—á–µ–π:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π');
        });
}

// ==================== –ù–û–í–û–°–¢–ò ====================
function loadNewsData() {
    loadJSONData('../data/news.json')
        .then(data => {
            newsData = data;
            renderNews();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
            newsData = createDefaultNewsData();
            renderNews();
        });
}

function createDefaultNewsData() {
    return [
        {
            id: 1,
            title: "–í—ñ–¥–∫—Ä–∏–≤—Å—è –Ω–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª",
            description: "–°—É—á–∞—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —Ç–∞ —Ñ–∞—Ö—ñ–≤—Ü—ñ",
            badge: "üÜï –ù–æ–≤–∏–Ω–∞",
            date: "15 –≤–µ—Ä–µ—Å–Ω—è 2024",
            image: "https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80"
        }
    ];
}

function renderNews() {
    const container = document.getElementById('newsContainer');
    container.innerHTML = '';

    newsData.forEach((news, index) => {
        const newsCard = createNewsCard(news, index);
        container.appendChild(newsCard);
    });
}

function createNewsCard(news, index) {
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
        <div class="card-header">
            <h3>–ù–æ–≤–æ—Å—Ç—å ${index + 1}</h3>
        </div>
        
        <div class="form-group">
            <label>–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
            <img src="${news.image}" alt="–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="current-image" id="newsCurrentImage_${index}">
        </div>

        <div class="form-group">
            <label>–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
            <div class="image-upload" onclick="selectNewsImage(${index})">
                <input type="file" id="newsImageInput_${index}" accept="image/*" style="display: none;" onchange="handleNewsImageUpload(${index}, this)">
                <p>üì∏ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                <p style="font-size: 12px; color: #7f8c8d;">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, GIF</p>
                <img id="newsPreview_${index}" class="image-preview" style="display: none;">
            </div>
        </div>

        <div class="form-group">
            <label>–ë–µ–π–¥–∂:</label>
            <input type="text" id="newsBadge_${index}" value="${news.badge || ''}" placeholder="üÜï –ù–æ–≤–æ—Å—Ç—å">
        </div>

        <div class="form-group">
            <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
            <input type="text" id="newsTitle_${index}" value="${news.title || ''}" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏">
        </div>

        <div class="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
            <textarea id="newsDescription_${index}" rows="3" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏">${news.description || ''}</textarea>
        </div>

        <div class="form-group">
            <label>–î–∞—Ç–∞:</label>
            <input type="text" id="newsDate_${index}" value="${news.date || ''}" placeholder="15 —Å–µ–Ω—Ç—è–±—Ä—è 2024">
        </div>

        <div class="action-buttons">
            <button class="btn btn-success" onclick="saveNewsItem(${index})">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button class="btn btn-danger" onclick="deleteNewsItem(${index})">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;
    return card;
}

function selectNewsImage(index) {
    document.getElementById(`newsImageInput_${index}`).click();
}

function handleNewsImageUpload(index, input) {
    const file = input.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const preview = document.getElementById(`newsPreview_${index}`);
            const uploadDiv = input.parentElement;
            
            preview.src = e.target.result;
            preview.style.display = 'block';
            uploadDiv.classList.add('has-image');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            newsData[index].image = e.target.result;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            document.getElementById(`newsCurrentImage_${index}`).src = e.target.result;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            saveNewsData();
        };
        reader.readAsDataURL(file);
    }
}

function saveNewsItem(index) {
    const badge = document.getElementById(`newsBadge_${index}`).value;
    const title = document.getElementById(`newsTitle_${index}`).value;
    const description = document.getElementById(`newsDescription_${index}`).value;
    const date = document.getElementById(`newsDate_${index}`).value;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    newsData[index] = {
        ...newsData[index],
        badge: badge,
        title: title,
        description: description,
        date: date
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
    saveNewsData();
}

function deleteNewsItem(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?')) {
        newsData.splice(index, 1);
        saveNewsData();
        renderNews();
    }
}

function addNewNews() {
    const newNews = {
        id: Date.now(),
        title: "–ù–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞",
        description: "–û–ø–∏—Å –Ω–æ–≤–∏–Ω–∏",
        badge: "üÜï –ù–æ–≤–∏–Ω–∞",
        date: new Date().toLocaleDateString('ru-RU'),
        image: "https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80"
    };
    
    newsData.push(newNews);
    saveNewsData();
    renderNews();
}

function saveNewsData() {
    saveJSONData('../data/news.json', newsData)
        .then(() => {
            showSuccessMessage();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π');
        });
}

// ==================== –û–¢–ó–´–í–´ ====================
function loadReviewsData() {
    loadJSONData('../data/reviews.json')
        .then(data => {
            reviewsData = data;
            renderReviews();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
            reviewsData = createDefaultReviewsData();
            renderReviews();
        });
}

function createDefaultReviewsData() {
    return [
        {
            id: 1,
            author: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            text: "–í—ñ–¥–º—ñ–Ω–Ω–∞ –∫–ª—ñ–Ω—ñ–∫–∞! –õ—ñ–∫–∞—Ä—ñ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ, –ø–µ—Ä—Å–æ–Ω–∞–ª —É–≤—ñ—á–ª–∏–≤–∏–π.",
            rating: 5,
            date: "10 –≤–µ—Ä–µ—Å–Ω—è 2024"
        }
    ];
}

function renderReviews() {
    const container = document.getElementById('reviewsContainer');
    container.innerHTML = '';

    reviewsData.forEach((review, index) => {
        const reviewCard = createReviewCard(review, index);
        container.appendChild(reviewCard);
    });
}

function createReviewCard(review, index) {
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
        <div class="card-header">
            <h3>–û—Ç–∑—ã–≤ ${index + 1}</h3>
        </div>
        
        <div class="form-group">
            <label>–ê–≤—Ç–æ—Ä:</label>
            <input type="text" id="reviewAuthor_${index}" value="${review.author || ''}" placeholder="–ò–º—è –∞–≤—Ç–æ—Ä–∞">
        </div>

        <div class="form-group">
            <label>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</label>
            <textarea id="reviewText_${index}" rows="4" placeholder="–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞">${review.text || ''}</textarea>
        </div>

        <div class="form-group">
            <label>–†–µ–π—Ç–∏–Ω–≥ (1-5):</label>
            <input type="number" id="reviewRating_${index}" value="${review.rating || ''}" min="1" max="5" placeholder="5">
        </div>

        <div class="form-group">
            <label>–î–∞—Ç–∞:</label>
            <input type="text" id="reviewDate_${index}" value="${review.date || ''}" placeholder="10 —Å–µ–Ω—Ç—è–±—Ä—è 2024">
        </div>

        <div class="action-buttons">
            <button class="btn btn-success" onclick="saveReview(${index})">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button class="btn btn-danger" onclick="deleteReview(${index})">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;
    return card;
}

function saveReview(index) {
    const author = document.getElementById(`reviewAuthor_${index}`).value;
    const text = document.getElementById(`reviewText_${index}`).value;
    const rating = document.getElementById(`reviewRating_${index}`).value;
    const date = document.getElementById(`reviewDate_${index}`).value;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    reviewsData[index] = {
        ...reviewsData[index],
        author: author,
        text: text,
        rating: parseInt(rating),
        date: date
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
    saveReviewsData();
}

function deleteReview(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) {
        reviewsData.splice(index, 1);
        saveReviewsData();
        renderReviews();
    }
}

function addNewReview() {
    const newReview = {
        id: Date.now(),
        author: "–ù–æ–≤–∏–π –∞–≤—Ç–æ—Ä",
        text: "–¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É",
        rating: 5,
        date: new Date().toLocaleDateString('ru-RU')
    };
    
    reviewsData.push(newReview);
    saveReviewsData();
    renderReviews();
}

function saveReviewsData() {
    saveJSONData('../data/reviews.json', reviewsData)
        .then(() => {
            showSuccessMessage();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤');
        });
}

// ==================== –¶–ï–ù–´ ====================
function loadPricesData() {
    loadJSONData('../data/prices.json')
        .then(data => {
            pricesData = data;
            renderPrices();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω:', error);
            pricesData = createDefaultPricesData();
            renderPrices();
        });
}

function createDefaultPricesData() {
    return [
        {
            id: 1,
            service: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –ª—ñ–∫–∞—Ä—è",
            price: "500 –≥—Ä–Ω",
            category: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó"
        }
    ];
}

function renderPrices() {
    const container = document.getElementById('pricesContainer');
    container.innerHTML = '';

    pricesData.forEach((price, index) => {
        const priceCard = createPriceCard(price, index);
        container.appendChild(priceCard);
    });
}

function createPriceCard(price, index) {
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
        <div class="card-header">
            <h3>–ü–æ–∑–∏—Ü–∏—è ${index + 1}</h3>
        </div>
        
        <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:</label>
            <input type="text" id="priceService_${index}" value="${price.service || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏">
        </div>

        <div class="form-group">
            <label>–¶–µ–Ω–∞:</label>
            <input type="text" id="priceValue_${index}" value="${price.price || ''}" placeholder="–¶–µ–Ω–∞">
        </div>

        <div class="form-group">
            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
            <input type="text" id="priceCategory_${index}" value="${price.category || ''}" placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è">
        </div>

        <div class="action-buttons">
            <button class="btn btn-success" onclick="savePrice(${index})">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button class="btn btn-danger" onclick="deletePrice(${index})">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;
    return card;
}

function savePrice(index) {
    const service = document.getElementById(`priceService_${index}`).value;
    const price = document.getElementById(`priceValue_${index}`).value;
    const category = document.getElementById(`priceCategory_${index}`).value;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    pricesData[index] = {
        ...pricesData[index],
        service: service,
        price: price,
        category: category
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ü–µ–Ω—ã
    savePricesData();
}

function deletePrice(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é?')) {
        pricesData.splice(index, 1);
        savePricesData();
        renderPrices();
    }
}

function addNewPrice() {
    const newPrice = {
        id: Date.now(),
        service: "–ù–æ–≤–∞ –ø–æ—Å–ª—É–≥–∞",
        price: "–¶—ñ–Ω–∞",
        category: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
    };
    
    pricesData.push(newPrice);
    savePricesData();
    renderPrices();
}

function savePricesData() {
    saveJSONData('../data/prices.json', pricesData)
        .then(() => {
            showSuccessMessage();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω');
        });
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
function loadSettingsData() {
    loadJSONData('../data/settings.json')
        .then(data => {
            settingsData = data;
            renderSettings();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            settingsData = createDefaultSettingsData();
            renderSettings();
        });
}

function createDefaultSettingsData() {
    return {
        siteName: "–ú–µ–¥–∏—á–Ω–∞ –∫–ª—ñ–Ω—ñ–∫–∞",
        phone: "+38 (000) 000-00-00",
        email: "info@clinic.com",
        address: "–º. –ö–∏—ó–≤, –≤—É–ª. –ú–µ–¥–∏—á–Ω–∞, 1",
        workingHours: "–ü–Ω-–ü—Ç: 8:00-20:00, –°–±-–ù–¥: 9:00-18:00"
    };
}

function renderSettings() {
    const container = document.getElementById('settingsContainer');
    container.innerHTML = `
        <div class="card">
            <div class="card-header">
                <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞</h3>
            </div>
            
            <div class="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞:</label>
                <input type="text" id="siteName" value="${settingsData.siteName || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞">
            </div>

            <div class="form-group">
                <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                <input type="text" id="phone" value="${settingsData.phone || ''}" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω">
            </div>

            <div class="form-group">
                <label>Email:</label>
                <input type="email" id="email" value="${settingsData.email || ''}" placeholder="Email">
            </div>

            <div class="form-group">
                <label>–ê–¥—Ä–µ—Å:</label>
                <input type="text" id="address" value="${settingsData.address || ''}" placeholder="–ê–¥—Ä–µ—Å">
            </div>

            <div class="form-group">
                <label>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</label>
                <input type="text" id="workingHours" value="${settingsData.workingHours || ''}" placeholder="–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã">
            </div>

            <div class="form-group">
                <label>Facebook:</label>
                <input type="text" id="facebook" value="${settingsData.facebook || ''}" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ Facebook">
            </div>

            <div class="form-group">
                <label>Instagram:</label>
                <input type="text" id="instagram" value="${settingsData.instagram || ''}" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ Instagram">
            </div>

            <div class="form-group">
                <label>Telegram:</label>
                <input type="text" id="telegram" value="${settingsData.telegram || ''}" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram">
            </div>

            <button class="btn btn-success" onclick="saveSettings()">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
        </div>
    `;
}

function saveSettings() {
    settingsData = {
        siteName: document.getElementById('siteName').value,
        phone: document.getElementById('phone').value,
        email: document.getElementById('email').value,
        address: document.getElementById('address').value,
        workingHours: document.getElementById('workingHours').value,
        facebook: document.getElementById('facebook').value,
        instagram: document.getElementById('instagram').value,
        telegram: document.getElementById('telegram').value
    };

    saveJSONData('../data/settings.json', settingsData)
        .then(() => {
            showSuccessMessage();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        });
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö
function loadJSONData(url) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
    const filename = url.split('/').pop();
    
    // –î–ª—è Netlify –∏—Å–ø–æ–ª—å–∑—É–µ–º API endpoint
    return fetch(`/api/load-data?filename=${filename}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .catch(error => {
            console.error('Network error when loading data:', error);
            throw error;
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –¥–∞–Ω–Ω—ã—Ö
function saveJSONData(url, data) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
    const filename = url.split('/').pop();
    
    // –î–ª—è Netlify –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
    return fetch('/api/save-data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            filename: filename,
            data: data
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .catch(error => {
        console.error('Network error when saving data:', error);
        throw error;
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessMessage() {
    const message = document.getElementById('successMessage');
    if (message) {
        message.style.display = 'block';
        setTimeout(() => {
            message.style.display = 'none';
        }, 3000);
    }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
function convertImageToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
        reader.readAsDataURL(file);
    });
}