// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
const { exec } = require('child_process');
const { promisify } = require('util');
const mysql = require('mysql2/promise');

const execAsync = promisify(exec);

async function fullSystemTest() {
  console.log('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...');
  console.log('================================\n');
  
  let testResults = {
    node: false,
    npm: false,
    mysqlServer: false,
    database: false,
    tables: false,
    data: false,
    api: false
  };
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    console.log('üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js...');
    try {
      const nodeVersion = await execAsync('node --version');
      console.log(`‚úÖ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${nodeVersion.stdout.trim()}`);
      testResults.node = true;
    } catch (error) {
      console.log('‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    console.log('\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ npm...');
    try {
      const npmVersion = await execAsync('npm --version');
      console.log(`‚úÖ npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${npmVersion.stdout.trim()}`);
      testResults.npm = true;
    } catch (error) {
      console.log('‚ùå npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ MySQL —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ MySQL —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
      const connection = await mysql.createConnection({
        host: 'localhost',
        user: 'root',
        password: '',
        timeout: 5000
      });
      
      console.log('‚úÖ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
      testResults.mysqlServer = true;
      
      // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      try {
        await connection.execute("USE `privatna_likarnya`");
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö privatna_likarnya –¥–æ—Å—Ç—É–ø–Ω–∞');
        testResults.database = true;
        
        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        console.log('\nüîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...');
        const [tables] = await connection.execute("SHOW TABLES");
        const tableNames = tables.map(row => Object.values(row)[0]);
        
        const requiredTables = ['admins', 'doctors', 'services', 'site_settings', 'news', 'hero_slides'];
        const missingTables = requiredTables.filter(table => !tableNames.includes(table));
        
        if (missingTables.length === 0) {
          console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
          testResults.tables = true;
        } else {
          console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: ${missingTables.join(', ')}`);
        }
        
        // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüîç –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        try {
          const [doctorsCount] = await connection.execute('SELECT COUNT(*) as count FROM doctors');
          const [servicesCount] = await connection.execute('SELECT COUNT(*) as count FROM services');
          
          console.log(`üìä –í—Ä–∞—á–∏: ${doctorsCount[0].count} –∑–∞–ø–∏—Å–µ–π`);
          console.log(`üìä –£—Å–ª—É–≥–∏: ${servicesCount[0].count} –∑–∞–ø–∏—Å–µ–π`);
          
          if (doctorsCount[0].count > 0 && servicesCount[0].count > 0) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö');
            testResults.data = true;
          } else {
            console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)');
            testResults.data = true; // –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
          }
        } catch (dataError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', dataError.message);
        }
        
      } catch (dbError) {
        console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', dbError.message);
      }
      
      await connection.end();
    } catch (error) {
      console.log('‚ùå MySQL —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    
    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ñ—É–Ω–∫—Ü–∏–π
    console.log('\nüîç –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ñ—É–Ω–∫—Ü–∏–π...');
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
      const fs = require('fs').promises;
      await fs.access('netlify/functions/save-data-db.js');
      await fs.access('netlify/functions/load-data-db.js');
      
      console.log('‚úÖ Netlify Functions —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
      testResults.api = true;
    } catch (error) {
      console.log('‚ùå Netlify Functions –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('==========================');
    
    const totalTests = Object.keys(testResults).length;
    const passedTests = Object.values(testResults).filter(result => result).length;
    
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
    
    if (passedTests === totalTests) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
      console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start');
    } else {
      console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
      
      if (!testResults.node || !testResults.npm) {
        console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js —Å https://nodejs.org/');
      }
      
      if (!testResults.mysqlServer) {
        console.log('   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ MySQL —Å–µ—Ä–≤–µ—Ä (—Å–º. MYSQL_INSTALLATION.md)');
      }
      
      if (!testResults.database || !testResults.tables) {
        console.log('   3. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: node create-database.js');
      }
      
      if (!testResults.api) {
        console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ Netlify Functions –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ netlify/functions/');
      }
      
      console.log('   5. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: node full-system-test.js');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
fullSystemTest();